{
	"info": {
		"_postman_id": "32a3316e-5e19-42dc-bd50-0dc88287bddf",
		"name": "Geographql",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41932705"
	},
	"item": [
		{
			"name": "Cities",
			"item": [
				{
					"name": "City (Patrícia)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    const responseData = pm.response.json().data; // Verifica se o campo 'data' existe\r",
									"    pm.expect(responseData).to.have.property('city'); // Verifica se a cidade está presente\r",
									"    pm.expect(responseData.city).to.have.property('id'); // Verifica se o 'id' da cidade está presente\r",
									"    pm.expect(responseData.city).to.have.property('name'); // Verifica se o 'name' da cidade está presente\r",
									"    pm.expect(responseData.city).to.have.property('state_id'); // Verifica o estado\r",
									"    pm.expect(responseData.city).to.have.property('country_id'); // Verifica o país\r",
									"    pm.expect(responseData.city).to.have.property('country_code'); // Verifica o código do país\r",
									"    pm.expect(responseData.city).to.have.property('latitude'); // Verifica a latitude\r",
									"    pm.expect(responseData.city).to.have.property('longitude'); // Verifica a longitude\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Capturar o id', function () {\r",
									"    const responseData = pm.response.json().data; // Verifique se a resposta realmente contém 'data'\r",
									"    console.log(responseData);  // Imprima a resposta completa para inspecionar a estrutura\r",
									"\r",
									"    // Se a estrutura for diferente, ajuste a referência\r",
									"    if (responseData && responseData.city) {\r",
									"        const cityId = responseData.city.id;\r",
									"        console.log(cityId);\r",
									"        pm.globals.set(\"cityID\", cityId);  // Salve o ID da cidade\r",
									"    }\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"schemaCapsules\",{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"city\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"state_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"country_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"country_code\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"latitude\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"longitude\": {\r",
									"              \"type\": \"number\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"state_id\",\r",
									"            \"country_id\",\r",
									"            \"country_code\",\r",
									"            \"latitude\",\r",
									"            \"longitude\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"city\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"} )"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  city(id: 127759) {\r\n    # City Fields\r\n    id\r\n    name\r\n    state_id\r\n    country_id\r\n    country_code\r\n    latitude\r\n    longitude\r\n  }\r\n}",
								"variables": "{\r\n  \"id\":127759\r\n\r\n}"
							}
						},
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Countries",
			"item": [
				{
					"name": "Country (Tatiana)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Declarar o JSON apenas uma vez\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (jsonData && jsonData.data && jsonData.data.country) {\r",
									"    var country = jsonData.data.country;\r",
									"\r",
									"    // Testar se o status code da resposta é 200\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // Validar o contrato do schema \r",
									"    pm.test(\"Schema é válido\", function () {\r",
									"        pm.expect(country).to.have.property(\"id\");\r",
									"        pm.expect(country).to.have.property(\"name\");\r",
									"        pm.expect(country).to.have.property(\"iso2\");\r",
									"        pm.expect(country).to.have.property(\"capital\");\r",
									"        pm.expect(country).to.have.property(\"tld\");\r",
									"        pm.expect(country).to.have.property(\"currency\");\r",
									"        pm.expect(country).to.have.property(\"currency_symbol\");\r",
									"        pm.expect(country).to.have.property(\"emoji\");\r",
									"        pm.expect(country).to.have.property(\"states\");\r",
									"\r",
									"        // Validar a estrutura de 'states'\r",
									"        pm.expect(country.states).to.have.property(\"totalCount\");\r",
									"\r",
									"        // Adicionando verificação para edges\r",
									"        if (country.states && country.states.edges) {\r",
									"            pm.expect(country.states.edges).to.be.an(\"array\");\r",
									"\r",
									"            if (country.states.edges.length > 0) {\r",
									"                pm.expect(country.states.edges[0]).to.have.property(\"cursor\");\r",
									"                pm.expect(country.states.edges[0]).to.have.property(\"node\");\r",
									"                pm.expect(country.states.edges[0].node).to.have.property(\"id\");\r",
									"                pm.expect(country.states.edges[0].node).to.have.property(\"name\");\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Validar que cidades pertencem ao estado do país selecionado\r",
									"    pm.test(\"Validar que cidades pertencem ao estado do país selecionado\", function () {\r",
									"        pm.expect(country).to.have.property(\"name\");\r",
									"\r",
									"        // Adicionando verificação para edges\r",
									"        if (country.states && country.states.edges) {\r",
									"            pm.expect(country.states.edges).to.be.an(\"array\");\r",
									"\r",
									"            if (country.states.edges.length > 0) {\r",
									"                country.states.edges.forEach(function (state) {\r",
									"                    pm.expect(state.node).to.have.property(\"name\");\r",
									"\r",
									"                    if (state.node.cities && state.node.cities.edges.length > 0) {\r",
									"                        state.node.cities.edges.forEach(function (city) {\r",
									"                            pm.expect(city.node).to.have.property(\"name\");\r",
									"                        });\r",
									"                    }\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Capturar o ID de um país\r",
									"    pm.test(\"Capturar o id\", function () {\r",
									"        pm.globals.set(\"countryId\", country.id);\r",
									"    });\r",
									"\r",
									"    // Capturar dados do país (exemplo: \"name\", \"iso2\")\r",
									"    pm.test(\"Capturar dados do país\", function () {\r",
									"        pm.expect(country).to.have.property(\"name\");\r",
									"        pm.expect(country).to.have.property(\"iso2\");\r",
									"        pm.expect(country).to.have.property(\"capital\");\r",
									"        pm.expect(country).to.have.property(\"currency\");\r",
									"        pm.expect(country).to.have.property(\"currency_symbol\");\r",
									"        pm.expect(country).to.have.property(\"emoji\");\r",
									"    });\r",
									"\r",
									"    // Verificar se a capital pertence ao país correto\r",
									"    pm.test(\"Verificar se a capital pertence ao país correto\", function () {\r",
									"        pm.expect(country.capital).to.exist;\r",
									"    });\r",
									"\r",
									"    // Garantir que a moeda e o símbolo correspondem ao país\r",
									"    pm.test(\"Garantir que a moeda e o símbolo correspondem ao país\", function () {\r",
									"        pm.expect(country.currency).to.exist;\r",
									"        pm.expect(country.currency_symbol).to.exist;\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Dados do país não encontrados na resposta JSON.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"\r",
									"pm.globals.set(\"schema\", {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"country\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"id\": { \"type\": \"integer\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"iso2\": { \"type\": \"string\" },\r",
									"                        \"capital\": { \"type\": \"string\" },\r",
									"                        \"tld\": { \"type\": \"string\" },\r",
									"                        \"states\": {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"totalCount\": { \"type\": \"integer\" },\r",
									"                                \"edges\": {\r",
									"                                    \"type\": \"array\",\r",
									"                                    \"items\": {\r",
									"                                        \"type\": \"object\",\r",
									"                                        \"properties\": {\r",
									"                                            \"cursor\": { \"type\": \"string\" },\r",
									"                                            \"node\": {\r",
									"                                                \"type\": \"object\",\r",
									"                                                \"properties\": {\r",
									"                                                    \"id\": { \"type\": \"integer\" },\r",
									"                                                    \"name\": { \"type\": \"string\" }\r",
									"                                                },\r",
									"                                                \"required\": [\"id\", \"name\"]\r",
									"                                            }\r",
									"                                        },\r",
									"                                        \"required\": [\"cursor\", \"node\"]\r",
									"                                    }\r",
									"                                }\r",
									"                            },\r",
									"                            \"required\": [\"totalCount\", \"edges\"]\r",
									"                        },\r",
									"                        \"currency\": { \"type\": \"string\" },\r",
									"                        \"currency_symbol\": { \"type\": \"string\" },\r",
									"                        \"emoji\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"id\", \"name\", \"iso2\", \"capital\", \"tld\",\r",
									"                        \"states\", \"currency\", \"currency_symbol\", \"emoji\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\"country\"]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"data\"]\r",
									"}\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Country($id: Int) {  \r\n  country(id: $id) {\r\n    # Country Fields\r\n    id\r\n    name\r\n    iso2\r\n    capital\r\n    tld\r\n    states(page: { first: 2 }) {\r\n      totalCount\r\n      edges {\r\n        cursor\r\n        node {\r\n          id\r\n          name\r\n          cities(page: { first: 2 }) {  \r\n            totalCount\r\n            edges {\r\n              cursor\r\n              node {\r\n                id\r\n                name\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    currency\r\n    currency_symbol\r\n    emoji\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": 236\r\n\r\n}\r\n\r\n\r\n"
							}
						},
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "States",
			"item": [
				{
					"name": "States (Willams)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar o Status Code\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Realiza o Teste de Contrato\r",
									"pm.test(\"O esquema JSON é válido\", () => {\r",
									"    pm.response.to.have.jsonSchema(pm.globals.get('schema'));\r",
									"});\r",
									"\r",
									"// Verifica se a quantidade de estados do response corresponde ao filtro\r",
									"pm.test(\"O campo 'first' é válido\", () => {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.data.states.edges.length)\r",
									"    .to.eql(Number(pm.globals.get('first_states')))\r",
									"})\r",
									"\r",
									"// Verifica se o código do país que é retornado em cada estado corresponde ao código do país selecionado no filtro\r",
									"pm.test(\"O campo 'ciso2' é válido para todos os estados\", () => {\r",
									"    let response = pm.response.json()\r",
									"    response.data.states.edges.forEach(edge => {\r",
									"        pm.expect(edge.node.country_code).to.eql(pm.globals.get('ciso2_states'))})\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"ciso2_states\")\r",
									"pm.globals.unset(\"first_states\")\r",
									"pm.globals.unset(\"schema\")\r",
									"\r",
									"\r",
									"pm.globals.set(\"ciso2_states\", \"BR\");\r",
									"pm.globals.set(\"first_states\", \"27\");\r",
									"pm.globals.set(\"schema\", \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"states\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"totalCount\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"edges\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"cursor\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"node\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                      \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                      },\r",
									"                      \"state_code\": {\r",
									"                        \"type\": \"string\"\r",
									"                      },\r",
									"                      \"country_code\": {\r",
									"                        \"type\": \"string\"\r",
									"                      },\r",
									"                      \"latitude\": {\r",
									"                        \"type\": [\"number\", \"null\"]\r",
									"                      },\r",
									"                      \"longitude\": {\r",
									"                        \"type\": [\"number\", \"null\"]\r",
									"                      }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                      \"name\",\r",
									"                      \"state_code\",\r",
									"                      \"country_code\",\r",
									"                      \"latitude\",\r",
									"                      \"longitude\"\r",
									"                    ]\r",
									"                  }\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"cursor\",\r",
									"                  \"node\"\r",
									"                ]\r",
									"              }\r",
									"            },\r",
									"            \"pageInfo\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"hasNextPage\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"hasPreviousPage\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"endCursor\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"startCursor\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"hasNextPage\",\r",
									"                \"hasPreviousPage\",\r",
									"                \"endCursor\",\r",
									"                \"startCursor\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"totalCount\",\r",
									"            \"edges\",\r",
									"            \"pageInfo\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"states\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									")\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($ciso2: String!, $first: Int)\r\n{\r\n  states(\r\n    filter: { ciso2: $ciso2 }\r\n    page: { first: $first }\r\n  ) {\r\n    totalCount\r\n    edges {\r\n      cursor\r\n      node {\r\n        name\r\n        state_code\r\n        country_code\r\n        latitude\r\n        longitude\r\n      }\r\n    }\r\n    pageInfo {\r\n      hasNextPage\r\n      hasPreviousPage\r\n      endCursor\r\n      startCursor\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"ciso2\": \"{{ciso2_states}}\",\r\n    \"first\": {{first_states}}\r\n}"
							}
						},
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "State",
			"item": [
				{
					"name": "State (Brayan)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema é valido', function () {\r",
									"    pm.expect(tv4.validate(pm.response.json(), pm.globals.get(\"schemaState\"))).to.be.true;\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test('Capturar o id', function () {\r",
									"   pm.globals.set(\"stateID\", pm.response.json().data.state.id)\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test('Capturar o Objeto', function () {\r",
									"   pm.globals.set(\"stateObj\", pm.response.json().data.state)\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test('Validar o id capturado ', function () {\r",
									"   pm.expect(pm.response.json().data.state.id).to.be.eql(pm.globals.get(\"stateID\"))\r",
									"   \r",
									"});\r",
									"\r",
									"pm.test('Validar o objeto capturado', function () {\r",
									"    console.log(pm.response.json().data.state)\r",
									"    console.log(\" \")\r",
									"    console.log(pm.globals.get(\"stateObj\"))\r",
									"   pm.expect(pm.response.json().data.state).to.be.eql(pm.globals.get(\"stateObj\"))\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"schemaState\",{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"state\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"country_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"cities\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"totalCount\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"edges\": {\r",
									"                  \"type\": \"array\",\r",
									"                  \"items\": [\r",
									"                    {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"cursor\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"node\": {\r",
									"                          \"type\": \"object\",\r",
									"                          \"properties\": {\r",
									"                            \"id\": {\r",
									"                              \"type\": \"integer\"\r",
									"                            },\r",
									"                            \"name\": {\r",
									"                              \"type\": \"string\"\r",
									"                            }\r",
									"                          },\r",
									"                          \"required\": [\r",
									"                            \"id\",\r",
									"                            \"name\"\r",
									"                          ]\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"cursor\",\r",
									"                        \"node\"\r",
									"                      ]\r",
									"                    }\r",
									"                  ]\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"totalCount\",\r",
									"                \"edges\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"country_id\",\r",
									"            \"cities\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"state\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  state(locationCode: { country_code: \"BR\", state_code: \"RS\" }) {\r\n    # State Fields\r\n    id\r\n    name\r\n    country_id\r\n    cities(page: { first: 497 }) {\r\n      totalCount\r\n      edges {\r\n        cursor\r\n        node {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n    # ...\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{baseURL}}",
							"host": [
								"{{baseURL}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}